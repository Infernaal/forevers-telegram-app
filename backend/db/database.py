import os
from dotenv import load_dotenv
from sqlalchemy.ext.asyncio import (
    AsyncAttrs,
    async_sessionmaker,
    create_async_engine,
    AsyncSession,
)
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.exc import OperationalError, DisconnectionError
from typing import AsyncGenerator
import asyncio
import logging
from functools import wraps

logger = logging.getLogger(__name__)

# üîê –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

DB_USER = os.getenv("MYSQL_USER")
DB_PASSWORD = os.getenv("MYSQL_PASSWORD")
DB_HOST = os.getenv("MYSQL_HOST", "localhost")
DB_PORT = os.getenv("MYSQL_PORT", "3306")
DB_NAME = os.getenv("MYSQL_DATABASE")

DATABASE_URL = f"mysql+aiomysql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"

# ‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ async-–¥–≤–∏–∂–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
engine = create_async_engine(
    DATABASE_URL,
    echo=True,
    pool_size=20,
    max_overflow=30,
    pool_timeout=30,
    pool_recycle=3600,  # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å
    pool_pre_ping=True,  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
    connect_args={
        "connect_timeout": 60,
    }
)
async_session = async_sessionmaker(bind=engine, expire_on_commit=False)

# üì¶ –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–µ–π
class Base(AsyncAttrs, DeclarativeBase):
    pass

# üîÅ –òÔøΩÔøΩ–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

# üîÑ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —Å–±–æ—è—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
def db_retry(max_attempts: int = 3, delay: float = 1.0):
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            last_exception = None
            for attempt in range(max_attempts):
                try:
                    return await func(*args, **kwargs)
                except (OperationalError, DisconnectionError) as e:
                    last_exception = e
                    error_msg = str(e).lower()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    connection_errors = [
                        'lost connection',
                        'server has gone away',
                        'connection was killed',
                        'broken pipe',
                        'timeout',
                        'can\'t connect',
                        'connection refused'
                    ]

                    is_connection_error = any(err in error_msg for err in connection_errors)

                    if is_connection_error and attempt < max_attempts - 1:
                        logger.warning(f"Database connection error on attempt {attempt + 1}: {e}")
                        await asyncio.sleep(delay * (2 ** attempt))  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                        continue
                    else:
                        raise
                except Exception as e:
                    # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                    raise

            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
            raise last_exception
        return wrapper
    return decorator

# üß™ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏ –¥–ª—è Depends —Å retry
async def get_db() -> AsyncGenerator[AsyncSession, None]:
    max_attempts = 3
    for attempt in range(max_attempts):
        try:
            async with async_session() as session:
                yield session
                break
        except (OperationalError, DisconnectionError) as e:
            if attempt < max_attempts - 1:
                logger.warning(f"Database session creation failed on attempt {attempt + 1}: {e}")
                await asyncio.sleep(1.0 * (2 ** attempt))
                continue
            else:
                raise

# üîß –§ÔøΩÔøΩ–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å retry
async def execute_with_retry(session: AsyncSession, stmt, max_attempts: int = 3):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∑–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ —Å–±–æ—è—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    last_exception = None
    for attempt in range(max_attempts):
        try:
            return await session.execute(stmt)
        except (OperationalError, DisconnectionError) as e:
            last_exception = e
            error_msg = str(e).lower()

            connection_errors = [
                'lost connection',
                'server has gone away',
                'connection was killed',
                'broken pipe',
                'timeout',
                'can\'t connect',
                'connection refused'
            ]

            is_connection_error = any(err in error_msg for err in connection_errors)

            if is_connection_error and attempt < max_attempts - 1:
                logger.warning(f"Database execute error on attempt {attempt + 1}: {e}")
                await asyncio.sleep(1.0 * (2 ** attempt))
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
                await session.rollback()
                continue
            else:
                raise

    raise last_exception
